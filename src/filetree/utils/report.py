"""Module for generating detailed analysis reports."""
from datetime import datetime
from pathlib import Path
from typing import Dict, List
import json

class AnalysisReport:
    """Generate detailed analysis reports."""

    def __init__(self, directory: Path):
        """Initialize report generator."""
        self.directory = directory
        self.timestamp = datetime.now()
        self.findings = []
        self.statistics = {
            "total_files": 0,
            "total_size": 0,
            "duplicate_groups": 0,
            "wasted_space": 0,
            "hidden_files": 0,
            "large_files": [],
            "file_types": {},
            "depth_stats": {
                "max_depth": 0,
                "avg_depth": 0,
                "deep_paths": []
            }
        }
        self.recommendations = []

    def add_finding(self, category: str, message: str, severity: str = "info"):
        """Add a finding to the report."""
        icon = {
            "error": "❌",
            "warning": "⚠️",
            "info": "ℹ️",
            "success": "✅"
        }.get(severity, "ℹ️")
        
        self.findings.append({
            "category": category,
            "message": message,
            "severity": severity,
            "icon": icon
        })

    def add_recommendation(self, message: str):
        """Add a recommendation to the report."""
        self.recommendations.append(message)

    def update_statistics(self, stats: dict):
        """Update report statistics."""
        self.statistics.update(stats)

    def generate_markdown(self, output_path: Path):
        """Generate a markdown report."""
        with open(output_path, 'w', encoding='utf-8') as f:
            # Header
            f.write("# File Tree Analysis Report\n\n")
            f.write(f"Generated on: {self.timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Target Directory: {self.directory.absolute()}\n\n")

            # Summary section
            f.write("## Summary\n\n")
            f.write(f"- Total Files: {self.statistics['total_files']}\n")
            f.write(f"- Total Size: {format_size(self.statistics['total_size'])}\n")
            f.write(f"- Duplicate Groups: {self.statistics['duplicate_groups']}\n")
            f.write(f"- Wasted Space: {format_size(self.statistics['wasted_space'])}\n")
            f.write(f"- Hidden Files: {self.statistics['hidden_files']}\n\n")

            # File type distribution
            if self.statistics['file_types']:
                f.write("### File Type Distribution\n\n")
                for ext, count in self.statistics['file_types'].items():
                    f.write(f"- {ext or 'No extension'}: {count} files\n")
                f.write("\n")

            # Directory structure
            if self.statistics['depth_stats']['deep_paths']:
                f.write("### Directory Structure\n\n")
                f.write(f"- Maximum Depth: {self.statistics['depth_stats']['max_depth']} levels\n")
                f.write(f"- Average Depth: {self.statistics['depth_stats']['avg_depth']:.1f} levels\n")
                if len(self.statistics['depth_stats']['deep_paths']) > 0:
                    f.write("\nDeepest Paths:\n")
                    for path in self.statistics['depth_stats']['deep_paths'][:3]:
                        f.write(f"- {path}\n")
                f.write("\n")

            # Findings section
            if self.findings:
                f.write("## 🔍 Findings\n\n")
                for finding in self.findings:
                    f.write(f"{finding['icon']} **{finding['category']}**: {finding['message']}\n\n")

            # Large files section
            if self.statistics['large_files']:
                f.write("### 📦 Large Files\n\n")
                for file_info in sorted(self.statistics['large_files'], 
                                      key=lambda x: x['size'], reverse=True)[:5]:
                    f.write(f"- {file_info['path']} ({format_size(file_info['size'])})\n")
                f.write("\n")

            # Recommendations section
            if self.recommendations:
                f.write("## 💡 Recommendations\n\n")
                for recommendation in self.recommendations:
                    f.write(f"- {recommendation}\n")
                f.write("\n")

            # Footer with additional information
            f.write("\n---\n")
            f.write("*Generated by File Tree Analyzer*\n")
            f.write("For more information, run with `-h` or `--help`\n")

def format_size(size_in_bytes: int) -> str:
    """Format file size in human readable format."""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_in_bytes < 1024:
            return f"{size_in_bytes:.1f} {unit}"
        size_in_bytes /= 1024
    return f"{size_in_bytes:.1f} TB" 